// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/RoomListMsg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from proto/RoomListMsg.proto</summary>
public static partial class RoomListMsgReflection {

  #region Descriptor
  /// <summary>File descriptor for proto/RoomListMsg.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RoomListMsgReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Chdwcm90by9Sb29tTGlzdE1zZy5wcm90byLWAQoLUm9vbUxpc3RNc2cSCwoD",
          "dWlkGAEgASgJEg8KB3NraWxsSWQYAiABKAUSCQoBeBgDIAEoAhIJCgF5GAQg",
          "ASgCEgkKAXoYBSABKAISCgoCZXgYBiABKAISCgoCZXkYByABKAISCgoCZXoY",
          "CCABKAISDwoHY3VyUGFnZRgJIAEoBRIQCghwYWdlU2l6ZRgKIAEoBRIMCgRz",
          "aXplGAsgASgFEhgKBXJvb21zGAwgAygLMgkuUm9vbUluZm8SDAoEY29kZRgN",
          "IAEoCRILCgNtc2cYDiABKAkiZQoIUm9vbUluZm8SCgoCaWQYASABKAkSEAoI",
          "bWF4Q291bnQYAiABKAUSDQoFY291bnQYAyABKAUSDgoGc3RhdHVzGAQgASgF",
          "EhwKB3BsYXllcnMYBSADKAsyCy5QbGF5ZXJSb29tIkkKDkdldFJvb21JbmZv",
          "TXNnEhwKB3BsYXllcnMYASADKAsyCy5QbGF5ZXJSb29tEgwKBGNvZGUYAiAB",
          "KAkSCwoDbXNnGAMgASgJInAKClBsYXllclJvb20SCwoDdWlkGAEgASgJEhAK",
          "CHVzZXJuYW1lGAIgASgJEhAKCG5pY2tuYW1lGAMgASgJEg4KBmRlZ3JlZRgE",
          "IAEoBRINCgVzY29yZRgFIAEoBRISCgpyb29tU3RhdHVzGAYgASgFYgZwcm90",
          "bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomListMsg), global::RoomListMsg.Parser, new[]{ "Uid", "SkillId", "X", "Y", "Z", "Ex", "Ey", "Ez", "CurPage", "PageSize", "Size", "Rooms", "Code", "Msg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomInfo), global::RoomInfo.Parser, new[]{ "Id", "MaxCount", "Count", "Status", "Players" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetRoomInfoMsg), global::GetRoomInfoMsg.Parser, new[]{ "Players", "Code", "Msg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerRoom), global::PlayerRoom.Parser, new[]{ "Uid", "Username", "Nickname", "Degree", "Score", "RoomStatus" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class RoomListMsg : pb::IMessage<RoomListMsg> {
  private static readonly pb::MessageParser<RoomListMsg> _parser = new pb::MessageParser<RoomListMsg>(() => new RoomListMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomListMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomListMsgReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomListMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomListMsg(RoomListMsg other) : this() {
    uid_ = other.uid_;
    skillId_ = other.skillId_;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    ex_ = other.ex_;
    ey_ = other.ey_;
    ez_ = other.ez_;
    curPage_ = other.curPage_;
    pageSize_ = other.pageSize_;
    size_ = other.size_;
    rooms_ = other.rooms_.Clone();
    code_ = other.code_;
    msg_ = other.msg_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomListMsg Clone() {
    return new RoomListMsg(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private string uid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "skillId" field.</summary>
  public const int SkillIdFieldNumber = 2;
  private int skillId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillId {
    get { return skillId_; }
    set {
      skillId_ = value;
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 3;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 4;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 5;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "ex" field.</summary>
  public const int ExFieldNumber = 6;
  private float ex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Ex {
    get { return ex_; }
    set {
      ex_ = value;
    }
  }

  /// <summary>Field number for the "ey" field.</summary>
  public const int EyFieldNumber = 7;
  private float ey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Ey {
    get { return ey_; }
    set {
      ey_ = value;
    }
  }

  /// <summary>Field number for the "ez" field.</summary>
  public const int EzFieldNumber = 8;
  private float ez_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Ez {
    get { return ez_; }
    set {
      ez_ = value;
    }
  }

  /// <summary>Field number for the "curPage" field.</summary>
  public const int CurPageFieldNumber = 9;
  private int curPage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurPage {
    get { return curPage_; }
    set {
      curPage_ = value;
    }
  }

  /// <summary>Field number for the "pageSize" field.</summary>
  public const int PageSizeFieldNumber = 10;
  private int pageSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PageSize {
    get { return pageSize_; }
    set {
      pageSize_ = value;
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 11;
  private int size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  /// <summary>Field number for the "rooms" field.</summary>
  public const int RoomsFieldNumber = 12;
  private static readonly pb::FieldCodec<global::RoomInfo> _repeated_rooms_codec
      = pb::FieldCodec.ForMessage(98, global::RoomInfo.Parser);
  private readonly pbc::RepeatedField<global::RoomInfo> rooms_ = new pbc::RepeatedField<global::RoomInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoomInfo> Rooms {
    get { return rooms_; }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 13;
  private string code_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Code {
    get { return code_; }
    set {
      code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 14;
  private string msg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Msg {
    get { return msg_; }
    set {
      msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomListMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomListMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (SkillId != other.SkillId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ex, other.Ex)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ey, other.Ey)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ez, other.Ez)) return false;
    if (CurPage != other.CurPage) return false;
    if (PageSize != other.PageSize) return false;
    if (Size != other.Size) return false;
    if(!rooms_.Equals(other.rooms_)) return false;
    if (Code != other.Code) return false;
    if (Msg != other.Msg) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (SkillId != 0) hash ^= SkillId.GetHashCode();
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (Ex != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ex);
    if (Ey != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ey);
    if (Ez != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ez);
    if (CurPage != 0) hash ^= CurPage.GetHashCode();
    if (PageSize != 0) hash ^= PageSize.GetHashCode();
    if (Size != 0) hash ^= Size.GetHashCode();
    hash ^= rooms_.GetHashCode();
    if (Code.Length != 0) hash ^= Code.GetHashCode();
    if (Msg.Length != 0) hash ^= Msg.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Uid);
    }
    if (SkillId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SkillId);
    }
    if (X != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Z);
    }
    if (Ex != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Ex);
    }
    if (Ey != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(Ey);
    }
    if (Ez != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(Ez);
    }
    if (CurPage != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(CurPage);
    }
    if (PageSize != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(PageSize);
    }
    if (Size != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Size);
    }
    rooms_.WriteTo(output, _repeated_rooms_codec);
    if (Code.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(Code);
    }
    if (Msg.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(Msg);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (SkillId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
    }
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (Ex != 0F) {
      size += 1 + 4;
    }
    if (Ey != 0F) {
      size += 1 + 4;
    }
    if (Ez != 0F) {
      size += 1 + 4;
    }
    if (CurPage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurPage);
    }
    if (PageSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
    }
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
    }
    size += rooms_.CalculateSize(_repeated_rooms_codec);
    if (Code.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
    }
    if (Msg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomListMsg other) {
    if (other == null) {
      return;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.SkillId != 0) {
      SkillId = other.SkillId;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    if (other.Ex != 0F) {
      Ex = other.Ex;
    }
    if (other.Ey != 0F) {
      Ey = other.Ey;
    }
    if (other.Ez != 0F) {
      Ez = other.Ez;
    }
    if (other.CurPage != 0) {
      CurPage = other.CurPage;
    }
    if (other.PageSize != 0) {
      PageSize = other.PageSize;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
    rooms_.Add(other.rooms_);
    if (other.Code.Length != 0) {
      Code = other.Code;
    }
    if (other.Msg.Length != 0) {
      Msg = other.Msg;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Uid = input.ReadString();
          break;
        }
        case 16: {
          SkillId = input.ReadInt32();
          break;
        }
        case 29: {
          X = input.ReadFloat();
          break;
        }
        case 37: {
          Y = input.ReadFloat();
          break;
        }
        case 45: {
          Z = input.ReadFloat();
          break;
        }
        case 53: {
          Ex = input.ReadFloat();
          break;
        }
        case 61: {
          Ey = input.ReadFloat();
          break;
        }
        case 69: {
          Ez = input.ReadFloat();
          break;
        }
        case 72: {
          CurPage = input.ReadInt32();
          break;
        }
        case 80: {
          PageSize = input.ReadInt32();
          break;
        }
        case 88: {
          Size = input.ReadInt32();
          break;
        }
        case 98: {
          rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
          break;
        }
        case 106: {
          Code = input.ReadString();
          break;
        }
        case 114: {
          Msg = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
  private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomListMsgReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo(RoomInfo other) : this() {
    id_ = other.id_;
    maxCount_ = other.maxCount_;
    count_ = other.count_;
    status_ = other.status_;
    players_ = other.players_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo Clone() {
    return new RoomInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "maxCount" field.</summary>
  public const int MaxCountFieldNumber = 2;
  private int maxCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxCount {
    get { return maxCount_; }
    set {
      maxCount_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 3;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 4;
  private int status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 5;
  private static readonly pb::FieldCodec<global::PlayerRoom> _repeated_players_codec
      = pb::FieldCodec.ForMessage(42, global::PlayerRoom.Parser);
  private readonly pbc::RepeatedField<global::PlayerRoom> players_ = new pbc::RepeatedField<global::PlayerRoom>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerRoom> Players {
    get { return players_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (MaxCount != other.MaxCount) return false;
    if (Count != other.Count) return false;
    if (Status != other.Status) return false;
    if(!players_.Equals(other.players_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    hash ^= players_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (MaxCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MaxCount);
    }
    if (Count != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Count);
    }
    if (Status != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Status);
    }
    players_.WriteTo(output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (MaxCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    size += players_.CalculateSize(_repeated_players_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.MaxCount != 0) {
      MaxCount = other.MaxCount;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    players_.Add(other.players_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 16: {
          MaxCount = input.ReadInt32();
          break;
        }
        case 24: {
          Count = input.ReadInt32();
          break;
        }
        case 32: {
          Status = input.ReadInt32();
          break;
        }
        case 42: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GetRoomInfoMsg : pb::IMessage<GetRoomInfoMsg> {
  private static readonly pb::MessageParser<GetRoomInfoMsg> _parser = new pb::MessageParser<GetRoomInfoMsg>(() => new GetRoomInfoMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetRoomInfoMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomListMsgReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomInfoMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomInfoMsg(GetRoomInfoMsg other) : this() {
    players_ = other.players_.Clone();
    code_ = other.code_;
    msg_ = other.msg_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomInfoMsg Clone() {
    return new GetRoomInfoMsg(this);
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PlayerRoom> _repeated_players_codec
      = pb::FieldCodec.ForMessage(10, global::PlayerRoom.Parser);
  private readonly pbc::RepeatedField<global::PlayerRoom> players_ = new pbc::RepeatedField<global::PlayerRoom>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerRoom> Players {
    get { return players_; }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private string code_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Code {
    get { return code_; }
    set {
      code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 3;
  private string msg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Msg {
    get { return msg_; }
    set {
      msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetRoomInfoMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetRoomInfoMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!players_.Equals(other.players_)) return false;
    if (Code != other.Code) return false;
    if (Msg != other.Msg) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= players_.GetHashCode();
    if (Code.Length != 0) hash ^= Code.GetHashCode();
    if (Msg.Length != 0) hash ^= Msg.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    players_.WriteTo(output, _repeated_players_codec);
    if (Code.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Code);
    }
    if (Msg.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Msg);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += players_.CalculateSize(_repeated_players_codec);
    if (Code.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
    }
    if (Msg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetRoomInfoMsg other) {
    if (other == null) {
      return;
    }
    players_.Add(other.players_);
    if (other.Code.Length != 0) {
      Code = other.Code;
    }
    if (other.Msg.Length != 0) {
      Msg = other.Msg;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
        case 18: {
          Code = input.ReadString();
          break;
        }
        case 26: {
          Msg = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerRoom : pb::IMessage<PlayerRoom> {
  private static readonly pb::MessageParser<PlayerRoom> _parser = new pb::MessageParser<PlayerRoom>(() => new PlayerRoom());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomListMsgReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerRoom(PlayerRoom other) : this() {
    uid_ = other.uid_;
    username_ = other.username_;
    nickname_ = other.nickname_;
    degree_ = other.degree_;
    score_ = other.score_;
    roomStatus_ = other.roomStatus_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerRoom Clone() {
    return new PlayerRoom(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private string uid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 2;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 3;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "degree" field.</summary>
  public const int DegreeFieldNumber = 4;
  private int degree_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Degree {
    get { return degree_; }
    set {
      degree_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 5;
  private int score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "roomStatus" field.</summary>
  public const int RoomStatusFieldNumber = 6;
  private int roomStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomStatus {
    get { return roomStatus_; }
    set {
      roomStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (Username != other.Username) return false;
    if (Nickname != other.Nickname) return false;
    if (Degree != other.Degree) return false;
    if (Score != other.Score) return false;
    if (RoomStatus != other.RoomStatus) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Degree != 0) hash ^= Degree.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    if (RoomStatus != 0) hash ^= RoomStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Uid);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Username);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (Degree != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Degree);
    }
    if (Score != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Score);
    }
    if (RoomStatus != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(RoomStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Degree != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Degree);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    if (RoomStatus != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerRoom other) {
    if (other == null) {
      return;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Degree != 0) {
      Degree = other.Degree;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    if (other.RoomStatus != 0) {
      RoomStatus = other.RoomStatus;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Uid = input.ReadString();
          break;
        }
        case 18: {
          Username = input.ReadString();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 32: {
          Degree = input.ReadInt32();
          break;
        }
        case 40: {
          Score = input.ReadInt32();
          break;
        }
        case 48: {
          RoomStatus = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
