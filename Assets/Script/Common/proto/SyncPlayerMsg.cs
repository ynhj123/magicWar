// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/SyncPlayerMsg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from proto/SyncPlayerMsg.proto</summary>
public static partial class SyncPlayerMsgReflection {

  #region Descriptor
  /// <summary>File descriptor for proto/SyncPlayerMsg.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SyncPlayerMsgReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Chlwcm90by9TeW5jUGxheWVyTXNnLnByb3RvInkKDVN5bmNQbGF5ZXJNc2cS",
          "CwoDdWlkGAEgASgJEgkKAXgYAiABKAISCQoBehgDIAEoAhIKCgJleRgEIAEo",
          "AhIKCgJocBgFIAEoARINCgVzcGVlZBgGIAEoARIPCgdraWxsTnVtGAcgASgF",
          "Eg0KBWZyYW1lGAggASgDYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncPlayerMsg), global::SyncPlayerMsg.Parser, new[]{ "Uid", "X", "Z", "Ey", "Hp", "Speed", "KillNum", "Frame" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class SyncPlayerMsg : pb::IMessage<SyncPlayerMsg> {
  private static readonly pb::MessageParser<SyncPlayerMsg> _parser = new pb::MessageParser<SyncPlayerMsg>(() => new SyncPlayerMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncPlayerMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SyncPlayerMsgReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncPlayerMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncPlayerMsg(SyncPlayerMsg other) : this() {
    uid_ = other.uid_;
    x_ = other.x_;
    z_ = other.z_;
    ey_ = other.ey_;
    hp_ = other.hp_;
    speed_ = other.speed_;
    killNum_ = other.killNum_;
    frame_ = other.frame_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncPlayerMsg Clone() {
    return new SyncPlayerMsg(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private string uid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 2;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "ey" field.</summary>
  public const int EyFieldNumber = 4;
  private float ey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Ey {
    get { return ey_; }
    set {
      ey_ = value;
    }
  }

  /// <summary>Field number for the "hp" field.</summary>
  public const int HpFieldNumber = 5;
  private double hp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Hp {
    get { return hp_; }
    set {
      hp_ = value;
    }
  }

  /// <summary>Field number for the "speed" field.</summary>
  public const int SpeedFieldNumber = 6;
  private double speed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Speed {
    get { return speed_; }
    set {
      speed_ = value;
    }
  }

  /// <summary>Field number for the "killNum" field.</summary>
  public const int KillNumFieldNumber = 7;
  private int killNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KillNum {
    get { return killNum_; }
    set {
      killNum_ = value;
    }
  }

  /// <summary>Field number for the "frame" field.</summary>
  public const int FrameFieldNumber = 8;
  private long frame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Frame {
    get { return frame_; }
    set {
      frame_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncPlayerMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncPlayerMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ey, other.Ey)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Hp, other.Hp)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Speed, other.Speed)) return false;
    if (KillNum != other.KillNum) return false;
    if (Frame != other.Frame) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (Ey != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ey);
    if (Hp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Hp);
    if (Speed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Speed);
    if (KillNum != 0) hash ^= KillNum.GetHashCode();
    if (Frame != 0L) hash ^= Frame.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Uid);
    }
    if (X != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(X);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (Ey != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Ey);
    }
    if (Hp != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(Hp);
    }
    if (Speed != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(Speed);
    }
    if (KillNum != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(KillNum);
    }
    if (Frame != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(Frame);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (Ey != 0F) {
      size += 1 + 4;
    }
    if (Hp != 0D) {
      size += 1 + 8;
    }
    if (Speed != 0D) {
      size += 1 + 8;
    }
    if (KillNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillNum);
    }
    if (Frame != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Frame);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncPlayerMsg other) {
    if (other == null) {
      return;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    if (other.Ey != 0F) {
      Ey = other.Ey;
    }
    if (other.Hp != 0D) {
      Hp = other.Hp;
    }
    if (other.Speed != 0D) {
      Speed = other.Speed;
    }
    if (other.KillNum != 0) {
      KillNum = other.KillNum;
    }
    if (other.Frame != 0L) {
      Frame = other.Frame;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Uid = input.ReadString();
          break;
        }
        case 21: {
          X = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
        case 37: {
          Ey = input.ReadFloat();
          break;
        }
        case 41: {
          Hp = input.ReadDouble();
          break;
        }
        case 49: {
          Speed = input.ReadDouble();
          break;
        }
        case 56: {
          KillNum = input.ReadInt32();
          break;
        }
        case 64: {
          Frame = input.ReadInt64();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
